#!/usr/bin/env php
<?php

/**
 * php vendor/luguohuakai/packme/packme
 * 快速打包项目代码 <br>
 * 运行于项目根目录 <br>
 * 首次运行会在当前目录下生成 dist/version.ini <br>
 * 主要是利用了git archive(归档)功能 <br>
 * 环境依赖: php>=7.4/git命令行/zippy <br>
 * @author DM <769245396@qq.com>
 */

use Alchemy\Zippy\Zippy;
use luguohuakai\func\Func;

require './vendor/autoload.php';

Func::logInfo('PACKME V1.0 POWERED BY LUGUOHUAKAI');
Func::logInfo();

// 准备所需文件====================================================================
$dist_dir = './dist';
if (!is_dir($dist_dir)) mkdir($dist_dir);
$version_file = './dist/version.ini';
if (!is_file($version_file)) file_put_contents($version_file, '');

// 初始化Git====================================================================
$git = new Git;
$replaceme = './vendor/luguohuakai/packme/replaceme';
$replaceme5 = './vendor/luguohuakai/packme/replaceme5';
if (is_file($replaceme)) $git->addFile($replaceme);
if (is_file($replaceme5)) $git->addFile($replaceme5);

// 生成文件默认替换位置绝对路径====================================================================
$object_name = strtoupper($git->objectName());
// : 自动判断当前项目根目录并生成replaceme.ini文件
$replaceme_ini_file = './replaceme.ini';
if (!is_file($replaceme_ini_file)) file_put_contents($replaceme_ini_file, 'object_root=/srun3/www/srun4-mgr/');
$replaceme_ini = new Ini($replaceme_ini_file);
$object_path = '';
switch ($object_name) {
    case strtoupper('srun4-selfservice'):
        $object_path = '/srun3/www/srun4-selfservice/';
        break;
    case strtoupper('srun4-api'):
    case strtoupper('srun4-api-74'):
        $object_path = '/srun3/www/srun4-api/';
        break;
    case strtoupper('srun4k-managent'):
    case strtoupper('srun4-mgr'):
        $object_path = '/srun3/www/srun4-mgr/';
        break;
    case strtoupper('srun4-system'):
        $object_path = '/srun3/www/srun4-system/';
        break;
    case strtoupper('srunDIY'):
        $object_path = '/srun3/www/srunDIY/';
        break;
    case strtoupper('srun4-webcron'):
        $object_path = '/srun3/www/srun4-webcron/';
        break;
    case strtoupper('srun_loginweb'):
        $object_path = '/srun3/www/srun_loginweb/';
        break;
    case strtoupper('srun4-idevm'):
        $object_path = '/srun3/www/srun4-idevm/';
        break;
    case strtoupper('srun4-idevm-selfservice'):
        $object_path = '/srun3/www/srun4-idevm-selfservice/';
        break;
    case strtoupper('srun_devmgrt'):
        $object_path = '/srun3/www/srun_devmgrt/';
        break;
    case strtoupper('srunlogweb'):
        $object_path = '/srun3/www/srunlogweb/';
        break;
    case strtoupper('srunweixin'):
        $object_path = '/srun3/www/srunweixin/';
        break;
    case strtoupper('webauthn'):
        $object_path = '/srun3/www/webauthn/';
        break;
    case strtoupper('wifi_portal'):
        $object_path = '/srun3/www/wifi_portal/';
        break;
    case strtoupper('srun_service'):
        $object_path = '/srun3/www/srun_service/';
        break;
    case strtoupper('srun4k-report'):
        $object_path = '/srun3/www/srun4k-report/';
        break;
    case strtoupper('srun4-bi-server'):
        $object_path = '/srun3/www/srun4-bi-server/';
        break;
    case strtoupper('MicroDraw'):
        $object_path = '/srun3/www/srun_mq/';
        break;
    case strtoupper('zabbixFromGithub'):
        $object_path = '/usr/share/zabbix/';
        break;
    case strtoupper('packme'):
        $object_path = '/packme/';
        break;
}
if ($object_path) $replaceme_ini->set('object_root', $object_path);
if (is_file($replaceme_ini_file)) $git->addFile($replaceme_ini_file);

// 使用信息统计====================================================================
@Func::post('http://218.75.75.91:4845/packme/default/add', ['name' => $object_name, 'path' => $object_path]);

// 选择打包方式====================================================================
// 打包方式 1:全量打包(默认) 2:最近一次提交和当前未提交的文件 3:某两次提交的差异文件 4:当前已修改但未提交的文件
Func::logInfo('Please select packaging method:');
Func::logInfo('      [1]: Full packaging');
Func::logInfo('      [2]: Pack the most recently commit and currently not commit files');
Func::logInfo('      [3]: Pack the difference files commit between two times');
Func::logInfo('      [4]: Pack files that have been modified but not yet commit');
Func::logInfo('      [5]: Pack the most recently commit files');
Func::logInfo('      [6]: Pack the last two commit files');
Func::logInfo('      [7]: Pack the specified one-time commit');
Func::logInfo('      [8]: Pack specified branch');
Func::logInfo('      [9]: Pack specified path');
Func::logPrimary('Your choice (default [5]):', false);
choice:
$choice = trim(fgets(STDIN));
if ($choice == '') $choice = 5;
$time = date('ymdHis');
$last_hash = strtoupper($git->hashShort());

// 具体打包操作====================================================================
switch ($choice) {
    case 2:
        $progress = new ProgressBar(100, "Packing last commit and current changes...");
        $file = "{$object_name}_LAST2NOW_{$time}_$last_hash.tar.gz";
        $rs = $git->output($file)->newCommit('NOW')->oldCommit('HEAD~1')->setProgressBar($progress)->run();
        if ($rs !== null) {
            Func::logInfo($rs);
            genVersion($version_file, $time, $git);
            Func::logPrimary('Generated File: ' . $git->getOutPutFile());
        }
        exit(0);
    case 5:
        $progress = new ProgressBar(100, "Packing last commit...");
        $file = "{$object_name}_LAST1COMMIT_{$time}_$last_hash.tar.gz";
        $rs = $git->output($file)->newCommit('HEAD')->oldCommit('HEAD~1')->setProgressBar($progress)->run();
        if ($rs !== null) {
            if ($rs) Func::logInfo($rs);
            genVersion($version_file, $time, $git);
            Func::logPrimary('Generated File: ' . $git->getOutPutFile());
        }
        exit(0);
    case 6:
        $progress = new ProgressBar(100, "Packing last two commits...");
        $file = "{$object_name}_LAST2COMMIT_{$time}_$last_hash.tar.gz";
        $rs = $git->output($file)->newCommit('HEAD')->oldCommit('HEAD~2')->setProgressBar($progress)->run();
        if ($rs !== null) {
            Func::logInfo($rs);
            genVersion($version_file, $time, $git);
            Func::logPrimary('Generated File: ' . $git->getOutPutFile());
        }
        exit(0);
    case 4:
        $progress = new ProgressBar(100, "Packing uncommitted changes...");
        $file = "{$object_name}_NOT_COMMIT_{$time}_$last_hash.tar.gz";
        $rs = $git->output($file)->newCommit('NOW')->setProgressBar($progress)->run();
        if ($rs !== null) {
            Func::logInfo($rs);
            genVersion($version_file, $time, $git);
            Func::logPrimary('Generated File: ' . $git->getOutPutFile());
        }
        exit(0);
    case 3:
        Func::logInfo('Please enter new commit id:', false);
        $new = trim(fgets(STDIN));
        $_new = strtoupper($new);
        Func::logInfo('Please enter old commit id:', false);
        $old = trim(fgets(STDIN));
        $_old = strtoupper($old);
        $progress = new ProgressBar(100, "Packing changes between commits...");
        $file = "{$object_name}_2COMMIT_{$time}_{$_new}_$_old.tar.gz";
        $rs = $git->output($file)->newCommit($new)->oldCommit($old)->setProgressBar($progress)->run();
        if ($rs !== null) {
            Func::logInfo($rs);
            genVersion($version_file, $time, $git);
            Func::logPrimary('Generated File: ' . $git->getOutPutFile());
        }
        exit(0);
    case 7:
        Func::logInfo('Please enter the commit id:', false);
        $new = trim(fgets(STDIN));
        $_new = strtoupper($new);
        $progress = new ProgressBar(100, "Packing specific commit...");
        $file = "{$object_name}_ONE_COMMIT_{$time}_$_new.tar.gz";
        $rs = $git->output($file)->newCommit($new)->oldCommit($new . '~')->setProgressBar($progress)->run();
        if ($rs !== null) {
            Func::logInfo($rs);
            genVersion($version_file, $time, $git);
            Func::logPrimary('Generated File: ' . $git->getOutPutFile());
        }
        exit(0);
    case 8:
        Func::logInfo('Please enter the branch name(default:current branch):', false);
        $branch = trim(fgets(STDIN));
        $rs = $git->branchCommitId($branch);
        if (empty($rs)) {
            Func::logError('Not found any commit');
            exit(1);
        }
        $new = $rs[0];
        $_new = strtoupper($new);
        $old = $rs[1];
        $_old = strtoupper($old);
        $progress = new ProgressBar(100, "Packing branch changes...");
        $file = "{$object_name}_BRANCH_{$time}_{$_new}_$_old.tar.gz";
        $rs = $git->output($file)->newCommit($new)->oldCommit($old)->setProgressBar($progress)->run();
        if ($rs !== null) {
            Func::logInfo($rs);
            genVersion($version_file, $time, $git);
            Func::logPrimary('Generated File: ' . $git->getOutPutFile());
        }
        exit(0);
    case 9: // 仅打包指定目录 不生成版本信息
        $file = "./dist/{$object_name}_PATH_$time.tar.gz";
        packPath($file);
        exit(0);
    case 1:
        $version = genVersion($version_file, $time, $git);
        fullPack($git,$object_name,$version,$version_file);
        break;
    default:
        Func::logError('Your input is incorrect, please re-enter');
        goto choice;
}

// 类====================================================================

class Ini
{
    private string $file;
    public array $all = [];

    public function __construct($file)
    {
        $this->file = $file;
        if (is_file($file)) {
            $rs = parse_ini_file($file);
            if ($rs !== false) $this->all = $rs;
        }
    }

    public function get($key, $default = null)
    {
        if (!is_file($this->file)) return $default;
        return $this->all[$key] ?? $default;
    }

    public function set($key, $value): bool
    {
        $data = array_merge($this->all, [$key => $value]);
        return !(file_put_contents($this->file, $this->arrayToIni($data)) === false);
    }

    public function setAll($data): bool
    {
        $data = array_merge($this->all, $data);
        return !(file_put_contents($this->file, $this->arrayToIni($data)) === false);
    }

    private function arrayToIni($data): string
    {
        if (empty($data)) return '';
        $str = '';
        foreach ($data as $key => $datum) {
            $str .= "$key=$datum\r\n";
        }
        return $str;
    }
}

class Git
{
    private string $cmd_hash_short = 'git rev-list HEAD --abbrev-commit --max-count=1';
    private string $cmd_hash_long = 'git rev-parse HEAD';
    private string $cmd_branch_name = 'git symbolic-ref --short -q HEAD';
    private string $cmd_name = 'git rev-parse --show-toplevel';
    private string $cmd_remote_v = 'git remote -v';
    private string $cmd_user_name = 'git config user.name';

    private string $output = '';
    private array $add_file = [];
    private string $format = '';
    private string $branch = '';

    private string $new_commit = '';
    private string $old_commit = '';

    // 默认打包于当前目录下的dist目录内
    private string $dist = './dist/';

    /**
     * 说明文件应该先就存在于dist<br>
     * 打包前先往说明文件追加所有变更文件路径<br>
     * 如果说明文件存在则自动打包说明文件<br>
     * @var string
     */
    private string $change_file = './dist/changes.txt';
    private string $change_file_pro = './dist/changes_pro.txt';

    public string $cmd = '';

    private ?ProgressBar $progressBar = null;

    public function setProgressBar(ProgressBar $progressBar): Git
    {
        $this->progressBar = $progressBar;
        return $this;
    }

    /**
     * @param string $output 输出文件名 如: update.tar.gz
     * @return $this
     */
    public function output(string $output): Git
    {
        $this->output = $output;
        $this->change_file_pro = $this->dist . $this->output . '.txt';
        return $this;
    }

    public function getOutPutFile(): string
    {
        return $this->dist . $this->output;
    }

    /**
     * 需要额外打包的文件 可添加多个
     * @param string $add_file 当前路径下的文件全路径 如: data/demo.sql
     * @return $this
     */
    public function addFile(string $add_file): Git
    {
        $this->add_file = array_merge($this->add_file, [$add_file]);
        return $this;
    }

    /**
     * 指定打包文件格式
     * 如果output已指定文件后缀这里可以不再指定
     * @param string $format 如: tar zip tar.gz
     * @return $this
     */
    public function format(string $format): Git
    {
        $this->format = $format;
        return $this;
    }

    /**
     * 指定最新的一次git提交的hash或HEAD(将包含)
     * @param $commit_id
     * @return $this
     */
    public function newCommit($commit_id): Git
    {
        $this->new_commit = $commit_id;
        return $this;
    }

    /**
     * 指定最之前一次git提交的hash或HEAD(将不包含)
     * @param $commit_id
     * @return $this
     */
    public function oldCommit($commit_id): Git
    {
        $this->old_commit = $commit_id;
        return $this;
    }

    /**
     * 全量打包时的分支名称
     * @param $branch_name
     * @return $this
     */
    public function branch($branch_name): Git
    {
        $this->branch = $branch_name;
        return $this;
    }

    public function prepare(): Git
    {
        $this->cmd .= 'git archive ';
        if ($this->branch) $this->cmd .= "$this->branch ";
        if ($this->output) $this->cmd .= "-o $this->dist$this->output ";
        if ($this->format) $this->cmd .= "--format=$this->format ";
        if (!empty($this->add_file)) {
            foreach ($this->add_file as $item) {
                $this->cmd .= "--add-file=$item ";
            }
        }
        if ($this->new_commit) {
            if ($this->new_commit === 'NOW') {
                $this->cmd .= "HEAD ";
            } else {
                $this->cmd .= "$this->new_commit ";
            }
            $this->prepareDiff();
        }
        $this->cmd = trim($this->cmd);
        return $this;
    }

    // : 需要排除已删除的文件, 否则会打包失败: fatal: pathspec 'xxx' did not match any files
    private function prepareDiff()
    {
        $diff = 'git diff --diff-filter=ACMR --name-only %s %s';

        if ($this->new_commit === 'NOW' && !$this->old_commit) {
            $diff = sprintf($diff, 'HEAD', '');
        } elseif ($this->new_commit === 'NOW' && $this->old_commit === 'HEAD~1') {
            $diff = sprintf($diff, 'HEAD~1', '');
        } else {
            $diff = sprintf($diff, $this->old_commit, $this->new_commit);
        }
        $diff = trim($diff);

        $this->cmd .= "$($diff)";

        $packme_ini = new Ini('./packme.ini');
        if (!($packme_ini->get('generate_change_txt') === '0')) {
            $log = 'git log %s..%s --pretty=format:"%%B%%nChange Files" --name-only --no-merges';
            $this->clearChangeFile();
            if ($this->new_commit === 'NOW' && !$this->old_commit) {
                file_put_contents($this->change_file, PHP_EOL . 'Change Files:' . PHP_EOL, FILE_APPEND);
                shell_exec("$diff 2>&1 >> $this->change_file");
            } elseif ($this->new_commit === 'NOW' && $this->old_commit === 'HEAD~1') {
                shell_exec(sprintf($log, 'HEAD~1', 'HEAD') . " 2>&1 >> $this->change_file");
            } else {
                shell_exec(sprintf($log, $this->old_commit, $this->new_commit) . " 2>&1 >> $this->change_file");
            }
        }

        // 生成和压缩包同名的说明文件用以解释压缩包, 而不用打开压缩包查看changes.txt
        copy($this->change_file, $this->change_file_pro);
    }

    /**
     * 清理历史记录
     * @return void
     */
    private function clearChangeFile()
    {
        if (!is_file($this->change_file)) {
            Func::logInfo('Generate file: ' . $this->change_file);
            file_put_contents($this->change_file, '');
        }
        $contents = file_get_contents($this->change_file);
        $separator = '====================';
        if ($contents) {
            Func::logInfo('Change file exists: ' . $this->change_file);
            $arr = explode($separator, $contents);
            file_put_contents($this->change_file, $arr[0] . $separator . PHP_EOL . PHP_EOL);
        } else {
            Func::logWarn('Change file contents is empty: ' . $this->change_file);
            if (is_file('./vendor/luguohuakai/packme/README.md')) {
                $readme = './vendor/luguohuakai/packme/README.md';
            } else {
                // 测试时使用
                $readme = './README.md';
            }
            if (is_file($readme)) {
                $separator2 = '## replaceme';
                $replaceme_doc = explode($separator2, file_get_contents($readme))[1];
                file_put_contents($this->change_file, $separator2 . $replaceme_doc . PHP_EOL . PHP_EOL);
            } else {
                Func::logWarn('Readme file not exists: ' . $readme);
            }
            file_put_contents($this->change_file, $separator . PHP_EOL . PHP_EOL, FILE_APPEND);
        }
    }

    public function run(): ?string
    {
        if (!$this->cmd) $this->prepare();
        if (is_file($this->change_file)) $this->addFile($this->change_file);
        if (is_file($this->change_file_pro)) $this->addFile($this->change_file_pro);

        if (PHP_OS === 'WINNT' && !$this->branch) {
            $ps = $this->execGit('where powershell');
            if ($ps) {
                $this->cmd = "$ps $this->cmd";
            } else {
                Func::logError('Cmd temporarily does not support, Please execute manually in powershell');
                Func::logPrimary($this->cmd);
                return '';
            }
        }

        if (is_file($this->getOutPutFile())) unlink($this->getOutPutFile());

        // 执行命令并更新进度
        if ($this->progressBar) {
            $this->progressBar->setProgress(30);
            $result = $this->execGit($this->cmd);
            $this->progressBar->setProgress(100);
            return $result;
        }

        return $this->execGit($this->cmd);
    }

    public function hashShort(): string
    {
        return $this->execGit($this->cmd_hash_short);
    }

    public function hashLong(): string
    {
        return $this->execGit($this->cmd_hash_long);
    }

    public function branchName(): string
    {
        return $this->execGit($this->cmd_branch_name);
    }

    public function username(): string
    {
        return trim($this->execGit($this->cmd_user_name));
    }

    public function objectName(): string
    {
        $res = trim($this->execGit($this->cmd_remote_v));
        if ($res) {
            $arr1 = explode(PHP_EOL, $res);
            if (isset($arr1[0]) && Func::hasSuffix(trim($arr1[0]), ')')) {
                $str = substr(trim($arr1[0]), strrpos(trim($arr1[0]), '/') + 1, strrpos(trim($arr1[0]), '.') - strrpos(trim($arr1[0]), '/') - 1);
                if ($str) $object_name = $str;
            }
        }

        if (!isset($object_name)) {
            $rs = $this->execGit($this->cmd_name);
            $arr = explode('/', $rs);
            $object_name = $arr[count($arr) - 1];
        }

        return $object_name;
    }

    // 根据分支名称获取分支创建时的 commit 和最新的 commit
    public function branchCommitId($branch = '')
    {
        if (!$branch) $branch = $this->branchName();
        exec("git reflog show $branch", $output);
        if (!empty($output)) {
            $old = explode(' ', array_pop($output))[0];
            $new = explode(' ', array_shift($output))[0];
            return [$new, $old];
        } else {
            return false;
        }
    }

    /**
     * @param $cmd
     * @return string|null
     */
    public function execGit($cmd): ?string
    {
//        $rs = shell_exec("$cmd 2>&1");
        $last_line = exec($cmd, $output, $code);
        if ($code === 0) {
            if (count($output) === 1) return trim($last_line);
            if (count($output) === 0) return '';
            $str = '';
            foreach ($output as $item) {
                $str .= $item . PHP_EOL;
            }
            return trim($str);
        }
        return null;
    }
}

// 进度条类
class ProgressBar
{
    private $total;
    private int $current = 0;
    private float $startTime;
    private int $lastPercent = 0;
    private int $lastUpdateTime = 0;
    private float $updateInterval = 0.1; // 更新间隔(秒)
    private $message;

    public function __construct($total = 100, $message = '')
    {
        $this->total = $total;
        $this->message = $message;
        $this->startTime = microtime(true);
    }

    public function setProgress($current)
    {
        $this->current = min($current, $this->total);
        $this->display();
    }

    public function setMessage($message)
    {
        $this->message = $message;
        $this->display();
    }

    private function display()
    {
        $now = microtime(true);
        if ($now - $this->lastUpdateTime < $this->updateInterval) {
            return;
        }

        $percent = floor(($this->current / $this->total) * 100);
        if ($percent == $this->lastPercent) {
            return;
        }

        $this->lastPercent = $percent;
        $this->lastUpdateTime = $now;

        $elapsed = $now - $this->startTime;
        $rate = $elapsed > 0 ? $this->current / $elapsed : 0;

        $bar = str_repeat('=', floor($percent / 2));
        $empty = str_repeat(' ', 50 - floor($percent / 2));

        // 清除当前行并移动到行首
        echo "\r\033[K";

        // 显示进度条
        echo sprintf("%s\n[%s>%s] %d%% %s",
            $this->message,
            $bar,
            $empty,
            $percent,
            $this->formatSize($rate) . '/s'
        );

        // 移动光标到上一行
        echo "\033[1A";

        // 刷新输出
        flush();

        if ($this->current >= $this->total) {
            echo "\n\n";
        }
    }

    private function formatSize($bytes): string
    {
        $units = ['B', 'KB', 'MB', 'GB'];
        $bytes = max($bytes, 0);
        $pow = floor(($bytes ? log($bytes) : 0) / log(1024));
        $pow = min($pow, count($units) - 1);
        $bytes /= pow(1024, $pow);
        return round($bytes, 2) . ' ' . $units[$pow];
    }
}

// 方法====================================================================

/**
 * 根据目录进行打包
 * @param string $file 生成的文件路径
 * @return void
 */
function packPath(string $file)
{
    Func::logPrimary("If you have any instructions about this installation package, please write them in advance './dist/changes.txt'");
    input:
    Func::logInfo('Please enter the path to be packaged:', false);
    $path = trim(fgets(STDIN));
    if ($path == '') {
        Func::logError('Path cannot be empty');
        goto input;
    } else if (!is_dir($path) && !is_file($path)) {
        Func::logError('Path not exists');
        goto input;
    } else {
        $zippy = Zippy::load();
        $tar_file = str_replace('.gz', '', $file);
        $tar = $zippy->create($tar_file);
        $tar->addMembers([$path]);
        $dir = '';
        if (is_dir($path)) {
            $dirArr = explode('/', $path);
            $dir = $dirArr[count($dirArr) - 1] . '/';
        }

        // 指定项目根路径
        global $replaceme_ini;
        $replaceme_ini->set('object_root', '/srun3/www/');

        if (is_file('replaceme.ini')) $tar->addMembers([$dir . 'replaceme.ini' => 'replaceme.ini']);
        global $replaceme, $replaceme5;
        $r = str_replace('./', '', $replaceme);
        $r5 = str_replace('./', '', $replaceme5);
        if (is_file('replaceme')) $tar->addMembers([$dir . 'replaceme' => 'replaceme']);
        if (is_file($r)) $tar->addMembers([$dir . 'replaceme' => $r]);
        if (is_file('replaceme5')) $tar->addMembers([$dir . 'replaceme5' => 'replaceme5']);
        if (is_file($r5)) $tar->addMembers([$dir . 'replaceme5' => $r5]);
        if (is_file('dist/changes.txt')) {
            $filePath = getRelativeFilePathsInSpecifyDirectory($dir);
            if ($filePath) {
                $content = "\nChange Files\n";
                $content .= implode("\n", $filePath);
                file_put_contents('dist/changes.txt', $content, FILE_APPEND);
            }
            $tar->addMembers([$dir . 'changes.txt' => 'dist/changes.txt']);
        }

        $zippy->create($file, $tar_file);
        unlink($tar_file);

        Func::logPrimary('Generated File: ' . $file);
    }
}

/**
 * 写一个获取指定目录的结构并返回数组的方法
 * @param $dir
 * @return array
 */
function getRelativeFilePathsInSpecifyDirectory($dir): array
{
    // 获取test目录的绝对路径
    $testDir = realpath('.' . DIRECTORY_SEPARATOR . $dir);

    // 初始化存储相对路径的数组
    $relativePaths = [];

    // 遍历test目录及其子目录
    $objects = new RecursiveIteratorIterator(
        new RecursiveDirectoryIterator($testDir, FilesystemIterator::SKIP_DOTS),
        RecursiveIteratorIterator::SELF_FIRST,
        RecursiveIteratorIterator::CATCH_GET_CHILD // Ignore "Permission denied"
    );

    foreach ($objects as $name => $object) {
        if ($object->isFile()) {
            // 计算相对于$baseDir的相对路径
            $relativePath = substr($name, strlen($testDir) + 1);
            $relativePaths[] = $relativePath;
        }
    }

    return $relativePaths;
}

/**
 * 全量打包
 * @param Git $git
 * @param $object_name
 * @param $version
 * @param $version_file
 * @return void
 */
function fullPack(Git $git, $object_name, $version, $version_file)
{
    Func::logPrimary('Packing vendor? (It will take a long time for y) (y/n) (default:n): ', false);
    $answer = trim(fgets(STDIN));
    Func::logInfo("Begin packing...");

    if ($answer == 'y') {
        $progress = new ProgressBar(100, "Packing main files...");

        // 打包主要文件
        $rs = $git->branch($git->branchName())->output("$object_name.{$version['version']}.tar")->addFile($version_file)->setProgressBar($progress)->run();
        if ($rs !== null) {
            $progress->setProgress(40);
            Func::logInfo($rs);
        } else {
            Func::logError('command exec failed: ' . $git->cmd);
            return;
        }

        $pack_file = $git->getOutPutFile();
        $zippy = Zippy::load();

        // 打包 vendor
        $progress->setMessage("Packing vendor files...");
        $archive = $zippy->open($pack_file);
        $archive->addMembers('vendor');
        $progress->setProgress(70);

        // 压缩文件
        $progress->setMessage("Compressing files...");
        $new_pack_file = $pack_file . '.gz';
        $zippy->create($new_pack_file, $pack_file);
        unlink($pack_file);
        $progress->setProgress(100);

        Func::logInfo("Packing vendor finished");
    } else {
        $progress = new ProgressBar(100, "Packing files...");

        $rs = $git->branch($git->branchName())->output("$object_name.{$version['version']}.tar.gz")->addFile($version_file)->setProgressBar($progress)->run();
        if ($rs !== null) {
            $progress->setProgress(100);
            Func::logInfo($rs);
        } else {
            Func::logError('command exec failed: ' . $git->cmd);
            exit(1);
        }
        $new_pack_file = $git->getOutPutFile();
    }

    Func::logInfo("Packing finished");
    Func::logPrimary('Generated File: ' . $new_pack_file);
}

/**
 * 生成版本信息
 * @param $version_file
 * @param $time
 * @param Git $git
 * @return array
 */
function genVersion($version_file, $time, Git $git): array
{
    $ini = new Ini($version_file);
    if ($ini->get('version')) {
        $arr = explode('.', $ini->get('version'));
        $vv = "$arr[0].$arr[1].";
    } else {
        $vv = 'V1.0.';
    }
    // 注意: 如需更改主次版本 如: V1.0 -> V2.1 需打包前手动更改./dist/version.ini中version字段的主次版本
    $version = [
        'author' => $git->username(),
        'version' => $vv . $time . '.' . strtoupper($git->hashShort()),
        'git_branch_name' => $git->branchName(),
        'git_version_hash_short' => $git->hashShort(),
        'git_version_hash_long' => $git->hashLong(),
        'update_time' => date('Y-m-d H:i:s'),
    ];
    Func::logInfo('Generate version...');
    Func::logInfo("Branch: {$version['git_branch_name']}");
    Func::logPrimary("Version: {$version['version']}");
    if ($ini->setAll($version)) {
        Func::logInfo("Update version succeed");
    } else {
        Func::logWarn("Update version failed!");
    }

    return $version;
}